{"version":3,"sources":["components/RankingTable/RankingNumberTableCell.js","env.js","components/Games/Game.js","components/Games/GameModal.js","components/RankingTable/RankingHistoryChart.js","components/RankingTable/RankingModal.js","components/RankingTable/RankingTable.js","components/Games/Games.js","components/Help/HelpSection.js","App.js","serviceWorker.js","index.js"],"names":["RankingNumberTableCell","TableCell","align","component","scope","this","props","idx","style","position","top","color","React","Component","API_ENDPOINT","Game","curDate","dayjs","unix","gameTs","backgroundColor","background","marginTop","Paper","Table","size","aria-label","TableHead","TableRow","className","format","TableBody","playerEntries","map","entry","key","name","Chip","avatar","Avatar","alt","src","avatar_path","label","rounds_played","kills","damage","self_damage","score","parseFloat","ranking_delta","marginRight","Math","abs","toFixed","GameModal","state","gameData","gameRequestPath","gameId","url","URL","searchParams","append","fetch","res","json","resJSON","setState","_","game_id","fetchGameData","Dialog","PaperProps","maxWidth","fullWidth","open","onEntering","bind","onClose","closeModalCallback","aria-labelledby","aria-describedby","DialogTitle","id","Divider","DialogContent","marginBottom","game_ts","players_data","textAlign","fontSize","DialogActions","Button","onClick","changeSelectedGameCallback","autoFocus","RankingHistoryChart","selectedGame","processedRankingData","gamesRange","renderedChart","changeForward","currentIndex","index","newIndex","max","min","length","rankingData","currentRanking","current_ranking","rankings","Array","history","x","Date","y","gameDate","parse","delta_ranking","processRankingData","rankingDataWindow","slice","lowestRanking","highestRanking","forEach","rankingPoint","ctx","document","getElementById","destroy","Chart","type","data","datasets","fill","borderColor","pointBorderColor","ranking","borderWidth","options","responsive","animation","duration","scales","xAxes","distribution","time","unit","displayFormats","year","yAxes","ticks","beginAtZero","elems","_index","Typography","gutterBottom","Slider","paddingTop","value","onChange","range","valueLabelDisplay","getAriaValueText","changeSelectedGame","closeModal","RankingModal","rankingHistoryRequestPath","handleClose","onModalClose","playerName","fetchRankingData","RankingTable","requestPath","rows","selectedPlayerName","fetchData","overflowX","elevation","row","changeSelectedPlayer","score_avg","games","Games","currentPage","numPages","pageSize","resultsBackground","num_pages","paddingBottom","display","InputLabel","Select","width","labelId","event","persist","parseInt","target","MenuItem","IconButton","padding","newPage","fontWeight","Object","keys","margin","HelpSection","helpModalOpen","dialogContentRef","createRef","openState","window","MathJax","typeset","current","changeModal","onEntered","typeSetEquations","ref","App","Container","height","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.afe814e3.chunk.js","sourcesContent":["import React from 'react'\nimport StarIcon from '@material-ui/icons/Star';\nimport TableCell from '@material-ui/core/TableCell';\n\nclass RankingNumberTableCell extends React.Component {\n\n    render () {\n      return <TableCell align=\"center\" component=\"td\" scope=\"row\">\n          {this.props.idx === 0 && <StarIcon style={{ position: 'relative', top: 5, color: 'yellow' }}></StarIcon>}\n          {this.props.idx === 1 && <StarIcon style={{ position: 'relative', top: 5, color: 'silver' }}></StarIcon>}\n          {this.props.idx === 2 && <StarIcon style={{ position: 'relative', top: 5, color: 'brown' }}></StarIcon>}\n          {this.props.idx >= 3 && <>{this.props.idx + 1}.</>}\n        </TableCell>;\n    }\n}\n\n\n\nexport default RankingNumberTableCell","// TODO: use dotenv and webpack to correctly set environment parameters\nconst API_URL = 'http://galdino.uk';\nconst API_PORT = 80;\nconst API_ENDPOINT = `${API_URL}:${API_PORT}`;\n\nexport {API_ENDPOINT , API_PORT , API_URL}\n","import React from 'react'\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport MuiTableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Avatar from '@material-ui/core/Avatar';\nimport Chip from '@material-ui/core/Chip';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport dayjs from 'dayjs';\n\nimport {API_ENDPOINT} from '../../env';\n\nclass Game extends React.Component {\n    render() {\n      let curDate = dayjs.unix(this.props.gameTs);\n      \n      return <MuiTableContainer style={{backgroundColor: this.props.background, marginTop: 20}} component={Paper}>\n        <Table size='medium' aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell className=\"game-table-header\" align=\"left\">\n                <h2>\n                  {curDate.format('DD/MM/YYYY - HH:mm')}\n                </h2>\n              </TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell align=\"left\"><strong>Player</strong></TableCell>\n              <TableCell align=\"center\"><strong>Rounds played</strong></TableCell>\n              <TableCell align=\"center\"><strong>Kills</strong></TableCell>\n              <TableCell align=\"center\"><strong>Damage</strong></TableCell>\n              <TableCell align=\"center\"><strong>Self damage</strong></TableCell>\n              <TableCell align=\"center\"><strong>Score</strong></TableCell>\n              <TableCell align=\"center\"><strong>&Delta;Ranking</strong></TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {this.props.playerEntries.map((entry, idx) => (\n              <TableRow key={entry.name}>\n                <TableCell align=\"left\" component=\"td\" scope=\"entry\">\n                  <Chip\n                    avatar={<Avatar alt=\"PlayerAvatar\" src={API_ENDPOINT + entry.avatar_path}>{entry.name[0]}</Avatar>}\n                    label={entry.name}\n                  />  \n                </TableCell>\n                <TableCell align=\"center\" component=\"td\" scope=\"entry\">{entry.rounds_played !== 0 ? entry.rounds_played : '-'}</TableCell>\n                <TableCell align=\"center\" component=\"td\" scope=\"entry\">{entry.kills}</TableCell>\n                <TableCell align=\"center\" component=\"td\" scope=\"entry\">{entry.damage}</TableCell>\n                <TableCell align=\"center\" component=\"td\" scope=\"entry\">{entry.self_damage}</TableCell>\n                <TableCell align=\"center\" component=\"td\" scope=\"entry\">{entry.score}</TableCell>\n                <TableCell align=\"center\" component=\"td\" scope=\"entry\">\n                  {parseFloat(entry.ranking_delta) !== 0.0 && (entry.ranking_delta > 0 ? \n                  <ArrowUpwardIcon style={{marginRight: 3, position: 'relative', top: 6, color: 'green'}}>\n                  </ArrowUpwardIcon> \n                    : \n                  <ArrowDownwardIcon style={{marginRight: 3, position: 'relative', top: 6, color: 'red'}}>\n                  </ArrowDownwardIcon>)}\n                  {Math.abs(entry.ranking_delta) < 10.0 && '0'}\n                  {Math.abs(entry.ranking_delta).toFixed(0)}\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </MuiTableContainer>;\n    }\n  }\n\n  export default Game","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Dialog from '@material-ui/core/Dialog';\nimport Divider from '@material-ui/core/Divider';\n\nimport CachedSharpIcon from '@material-ui/icons/CachedSharp';\nimport NavigateBefore from '@material-ui/icons/NavigateBefore';\nimport NavigateNext from '@material-ui/icons/NavigateNext';\n\nimport Game from './Game';\nimport {API_ENDPOINT} from '../../env.js';\n\nclass GameModal extends React.Component {\n    \n    state = {\n        gameData: null,\n    }\n    gameRequestPath = '/worms/api/game';\n\n    async fetchGameData() {\n        if(this.props.gameId !== null ) {\n            let url = new URL(API_ENDPOINT + this.gameRequestPath);\n            url.searchParams.append('game_id', this.props.gameId);\n    \n            let res = await fetch(url);\n            let resJSON = await res.json();\n    \n            this.setState((state, _) => ({\n                ...state,\n                gameData: resJSON,\n            }));\n        }\n    }\n\n    componentDidUpdate() {\n        if(this.state.gameData === null || this.props.gameId !== this.state.gameData.game_id) {\n            this.fetchGameData();\n        }\n    }\n\n    render() {\n        return <Dialog\n            PaperProps={{style: {backgroundColor: '#f5f5f5'}}}\n            maxWidth='md'\n            fullWidth={true}\n            open={this.props.gameId !== null}\n            onEntering={this.fetchGameData.bind(this)}\n            onClose={this.props.closeModalCallback}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\">\n\n                <DialogTitle id=\"alert-dialog-title\">Game {(this.state.gameData !== null ? this.state.gameData.game_id : \"...\")}</DialogTitle>\n\n                <Divider />\n\n                <DialogContent style={{marginBottom: 20}}>\n                    {this.state.gameData !== null && \n                    <Game gameTs={this.state.gameData.game_ts} playerEntries={this.state.gameData.players_data}>\n                    </Game>}\n                    {this.state.gameData === null && \n                    <div style={{textAlign: 'center', marginTop: 20}}>\n                        <CachedSharpIcon className='icon-spinner' fontSize='large' />\n                    </div>}\n                </DialogContent>\n\n                <Divider />\n                \n                <DialogActions>\n                    <Button onClick={() => {\n                            this.setState({\n                                gameData: null,\n                            }, () => this.props.changeSelectedGameCallback(false));\n                        }} color=\"primary\" autoFocus>\n                    <NavigateBefore></NavigateBefore> Previous\n                    </Button>\n                    <Button onClick={() => {\n                            this.setState({\n                                gameData: null,\n                            }, () => this.props.changeSelectedGameCallback(true));\n                        }} color=\"primary\" autoFocus>\n                        Next <NavigateNext></NavigateNext>\n                    </Button>\n                    <Button onClick={this.props.closeModalCallback} color=\"primary\" autoFocus>\n                        Close\n                    </Button>\n                </DialogActions>\n\n            </Dialog>\n    }\n}\n\nexport default GameModal;","import React from 'react'\nimport Chart from 'chart.js'\nimport CachedSharpIcon from '@material-ui/icons/CachedSharp';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\n\nimport GameModal from '../Games/GameModal.js';\n\nclass RankingHistoryChart extends React.Component {\n\n    state = {\n        selectedGame: null,\n        processedRankingData: null,\n        gamesRange: [0, 0],\n    }\n    renderedChart = null;\n\n    closeModal() {\n        this.setState((state,_) => ({\n            ...state,\n            selectedGame: null,\n        }));\n    }\n\n    changeSelectedGame(changeForward) {\n        let currentIndex = this.state.selectedGame.index;\n        let newIndex = changeForward ? currentIndex + 1 : currentIndex - 1;\n        // Point 0 is not a game, is the initial ranking\n        newIndex = Math.max(Math.min(newIndex, this.state.processedRankingData.length - 1), 1);\n\n        if(newIndex !== currentIndex) {\n            this.setState((state,_) => ({\n                ...state,\n                selectedGame: {\n                    index: newIndex,\n                    id: state.processedRankingData[newIndex].gameId,\n                }\n            }));\n        }\n    }\n\n    processRankingData() {\n        let rankingData = this.props.rankingData;\n        let currentRanking = rankingData.current_ranking;\n\n        let rankings = new Array(rankingData.history.length + 1);\n        rankings[rankingData.history.length] = {\n            gameId: rankingData.history[rankingData.history.length - 1].game_id,\n            x: new Date(rankingData.history[rankingData.history.length - 1].game_ts * 1000),\n            y: currentRanking,\n        }\n\n        for(let idx = rankingData.history.length - 1 ; idx >= 0 ; --idx) {\n            let gameId = null;\n            // Project start date\n            let gameDate = Date.parse('01 Jun 2020 00:00:00 GMT-03:00');\n            if(idx > 0) {\n                gameId = rankingData.history[idx-1].game_id;\n                let gameTs = rankingData.history[idx-1].game_ts;\n                gameDate = new Date(gameTs*1000);\n            }\n\n            currentRanking -= rankingData.history[idx].delta_ranking;\n\n            rankings[idx] = {\n                gameId: gameId,\n                x: gameDate,\n                y: currentRanking,\n            }\n        }\n\n        this.setState((state, _) => ({\n            ...state,\n            processedRankingData: rankings,\n        }));\n    }\n\n    componentDidUpdate() {\n        // No canvas rendered: no work to be done\n        if(this.props.rankingData === null) {\n            return;\n        }\n        if(this.state.processedRankingData === null) {\n            this.processRankingData();\n            this.setState((state, props) => ({\n                ...state,\n                gamesRange: [0, props.rankingData.history.length],\n            }));\n            return;\n        }\n\n        let processedRankingData = this.state.processedRankingData;\n        let rankingDataWindow = processedRankingData.slice(this.state.gamesRange[0], this.state.gamesRange[1]+1);\n\n        let lowestRanking = rankingDataWindow.length > 0 ? rankingDataWindow[0].y : 1500;\n        let highestRanking = rankingDataWindow.length > 0 ? rankingDataWindow[0].y : 1500;\n        rankingDataWindow.forEach(rankingPoint => {\n            lowestRanking = Math.min(lowestRanking, rankingPoint.y);\n            highestRanking = Math.max(highestRanking, rankingPoint.y);\n        });\n\n        let ctx = document.getElementById('ranking-history-chart');\n        ctx.style.backgroundColor = 'rgba(30,30,30,1)';\n\n        let getBorderColor = (ranking) => {\n            if(ranking.y === highestRanking) {\n                return 'rgba(0,0,255,1)';\n            } else if(ranking.y === lowestRanking) {\n                return 'rgba(255,0,0,1)'\n            } else {\n                return 'rgba(236,245,66,1)';\n            }\n        }\n\n        if(this.renderedChart !== null) {\n            this.renderedChart.destroy();\n        }\n        \n        this.renderedChart = new Chart(ctx, {\n            type: 'line',\n            data: {\n                datasets: [{\n                    fill: false,\n                    label: 'Ranking',\n                    data: rankingDataWindow,\n                    backgroundColor: 'rgba(220,220,220,1)',\n                    borderColor: 'rgba(236,245,66,1)',\n                    pointBorderColor: rankingDataWindow.map(getBorderColor),\n                    borderWidth: .8,\n                }]\n            },\n            options: {\n                responsive: true,\n                animation: {\n                    // If chart already rendered, don't animate again\n                    duration: this.renderedChart === null ? 500 : 0,\n                },\n                scales: {\n                    xAxes: [{\n                        type: 'time',\n                        distribution: 'series',\n                        time: {\n                            unit: 'year',\n                            displayFormats: {\n                                year: 'D/M/YY',\n                            }\n                        }\n                    }],\n                    yAxes: [{\n                        ticks: {\n                            beginAtZero: false\n                        }\n                    }],\n                },\n                onClick: (_, elems) => {\n                    if(elems.length > 0) {\n                        let index = elems[0]._index + this.state.gamesRange[0];\n                        if(index > 0) {\n                            this.setState((state,_) => ({\n                                selectedGame: {\n                                    index: index,\n                                    id: state.processedRankingData[index].gameId,\n                                },\n                            }));\n                        }\n                    }\n                }\n            }\n        });\n\n\n    }\n\n    render(){\n        if(this.props.rankingData !== null) {\n            return <div>\n                <div style={{marginTop: 10, textAlign: 'center'}}>\n                    <Typography id=\"range-slider\" gutterBottom>\n                        Games date range\n                    </Typography>\n                    <Slider\n                        style={{paddingTop: 0}}\n                        value={this.state.gamesRange}\n                        max={this.props.rankingData.history.length}\n                        onChange={(_, range) => {\n                                this.setState((state, _) => ({\n                                    ...state,\n                                    gamesRange: range,\n                                }));\n                            }\n                        }\n                        valueLabelDisplay=\"auto\"\n                        aria-labelledby=\"range-slider\"\n                        getAriaValueText={() => 'kappa'}\n                    />\n                </div>\n\n                <canvas id=\"ranking-history-chart\"></canvas>\n\n                <GameModal gameId={this.state.selectedGame ? this.state.selectedGame.id : null}\n                    changeSelectedGameCallback={this.changeSelectedGame.bind(this)}\n                    closeModalCallback={this.closeModal.bind(this)}\n                >\n                </GameModal>\n            </div>\n        } else {\n            return <div style={{textAlign: 'center'}}>\n                    <CachedSharpIcon className='icon-spinner' fontSize='large' />\n                </div>\n        }\n    }\n}\n\nexport default RankingHistoryChart;","import React from 'react'\nimport Button from '@material-ui/core/Button';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Dialog from '@material-ui/core/Dialog';\nimport Divider from '@material-ui/core/Divider';\nimport InfoIcon from '@material-ui/icons/Info';\n\nimport RankingHistoryChart from './RankingHistoryChart.js'\nimport {API_ENDPOINT} from '../../env.js';\n\nclass RankingModal extends React.Component {\n\n    state = {\n        rankingData: null,\n    }\n\n    rankingHistoryRequestPath = '/worms/api/player/ranking_history';\n\n    handleClose = () => {\n        this.props.onModalClose(null);\n        this.setState({\n            rankingData: null,\n        })\n    }\n\n    async fetchRankingData(){\n        let url = new URL(API_ENDPOINT + this.rankingHistoryRequestPath);\n        url.searchParams.append('player_name', this.props.playerName);\n  \n        let res = await fetch(url);\n        let resJSON = await res.json();\n  \n        this.setState((state, _) => ({\n            ...state,\n            rankingData: resJSON,\n        }));\n    }\n\n    render() {\n        return(\n            <Dialog\n                maxWidth='md'\n                fullWidth={true}\n                open={this.props.playerName !== null}\n                onEntering={this.fetchRankingData.bind(this)}\n                onClose={this.handleClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\">\n                    <DialogTitle id=\"alert-dialog-title\">{this.props.playerName}'s ranking history</DialogTitle>\n    \n                    <Divider />\n    \n                    <DialogContent>\n                        <p style={{marginBottom: 0, marginTop: 0}}> \n                            <InfoIcon style={{position: 'relative', top: 4}} color={'primary'} fontSize={'small'}></InfoIcon> \n                            Click on a point to see game details \n                        </p>\n\n                        <RankingHistoryChart rankingData={this.state.rankingData}></RankingHistoryChart>\n                    </DialogContent>\n    \n                    <Divider />\n                    \n                    <DialogActions>\n                        <Button onClick={this.handleClose} color=\"primary\" autoFocus>\n                            Close\n                        </Button>\n                    </DialogActions>\n              </Dialog>\n        )\n    }\n\n}\n\nexport default RankingModal","import React from 'react'\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow'\nimport Avatar from '@material-ui/core/Avatar';\nimport Chip from '@material-ui/core/Chip';\n\nimport RankingNumberTableCell from './RankingNumberTableCell.js'\nimport RankingModal from './RankingModal.js'\nimport {API_ENDPOINT} from '../../env.js'\n\n\nclass RankingTable extends React.Component {\n  \n    requestPath = '/worms/api/ranking'\n  \n    state = {\n      rows: [],\n      selectedPlayerName: null,\n    };\n  \n    componentDidMount() {\n      this.fetchData();\n    }\n  \n    async fetchData() {\n      let url = new URL(API_ENDPOINT+this.requestPath);\n\n      let res = await fetch(url);\n      let rows = await res.json();\n\n      this.setState((state, _) => ({\n        ...state,\n        rows: rows,\n      }));\n    }\n\n    changeSelectedPlayer(playerName){\n      this.setState((state, _) => ({\n        ...state,\n        selectedPlayerName: playerName,\n      }));\n    }\n  \n    render() {\n      return <Paper style={{marginTop: 30, overflowX: 'auto'}} elevation={4}>\n              <Table size='medium' aria-label=\"simple table\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell align=\"center\"><strong>#</strong></TableCell>\n                    <TableCell align=\"center\"><strong>Player</strong></TableCell>\n                    <TableCell align=\"center\"><strong>Ranking</strong></TableCell>\n                    <TableCell align=\"center\"><strong>Average score</strong></TableCell>\n                    <TableCell align=\"center\"><strong>Games</strong></TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {this.state.rows.map((row, idx) => (\n                    <TableRow key={row.name} className = \"playerTableRow\" onClick={() => this.changeSelectedPlayer(row.name)}>\n                      <RankingNumberTableCell name={row.name} idx={idx}></RankingNumberTableCell>\n                      <TableCell align=\"center\" component=\"td\" scope=\"row\">\n                        <Chip\n                          avatar={<Avatar alt=\"PlayerAvatar\" src={API_ENDPOINT + row.avatar_path}>{row.name[0]}</Avatar>}\n                          label={row.name}\n                        />  \n                      </TableCell>\n                      <TableCell style={{color: row.ranking >= 1500 ? 'green' : 'red'}} \n                        align=\"center\" component=\"td\" scope=\"row\">\n                          {row.ranking.toFixed(0)}\n                      </TableCell>\n                      <TableCell align=\"center\" component=\"td\" scope=\"row\">\n                          {row.score_avg.toFixed(0)}\n                      </TableCell>\n                      <TableCell align=\"center\" component=\"td\" scope=\"row\">{row.games}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n              <RankingModal\n                  onModalClose={this.changeSelectedPlayer.bind(this)}\n                  playerName={this.state.selectedPlayerName}\n                >\n              </RankingModal>\n        </Paper>\n    }\n}\n\nexport default RankingTable","import React from 'react';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport LastPage from '@material-ui/icons/LastPage';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport IconButton from '@material-ui/core/IconButton';\nimport Paper from '@material-ui/core/Paper';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\n\nimport Game from './Game.js'\nimport {API_ENDPOINT} from '../../env.js';\n\nclass Games extends React.Component {\n\n    requestPath = '/worms/api/games';\n    state = {\n      games: [],\n      currentPage: 0,\n      numPages: 0,\n      pageSize: 5,\n      resultsBackground: '#f5f5f5', \n    };\n  \n    componentDidMount() {\n      this.fetchData();\n    }\n  \n    async fetchData() {\n      this.setState((state, _) => ({\n        ...state,\n        resultsBackground: '#f5f5f5'\n      }));\n  \n      let url = new URL(API_ENDPOINT+this.requestPath);\n      url.searchParams.append('page', this.state.currentPage);\n      url.searchParams.append('page_size', this.state.pageSize);\n\n      let res = await fetch(url);\n      let data = await res.json();\n\n      this.setState((state, _) => ({\n        ...state,\n        games: data.games,\n        numPages: data.num_pages,\n        resultsBackground: 'white'\n      }));\n    }\n  \n    render() {\n      return <Paper style={{marginTop: 30, paddingBottom: 20, backgroundColor: '#f5f5f5'}} elevation={3}>\n        <h1 style={{paddingTop: 15, display: 'block'}}>Games</h1>\n        <div style={{marginBottom: 12}}>\n          <InputLabel id=\"demo-simple-select-label\">Games per page</InputLabel>\n          <Select\n            style={{width: 45}}\n            labelId=\"demo-simple-select-label\"\n            id=\"demo-simple-select\"\n            value={this.state.pageSize}\n            onChange={(event) => {\n                event.persist()\n                this.setState({\n                  ...this.state,\n                  pageSize: parseInt(event.target.value),\n                  currentPage: 0,\n                }, this.fetchData);\n              }\n            }\n          >\n            <MenuItem value={5}>5</MenuItem>\n            <MenuItem value={10}>10</MenuItem>\n            <MenuItem value={20}>20</MenuItem>\n          </Select>\n        </div>\n  \n        <div>\n          <IconButton\n              style={{padding: '0 0 0 0'}}\n              onClick={() => {\n                if(this.state.currentPage !== 0) {\n                  this.setState((state, _) => ({\n                    ...state,\n                    currentPage: 0,\n                  }), this.fetchData);\n                }\n              }}\n              aria-label=\"first page\"\n            >\n              <FirstPage />\n          </IconButton>\n\n          <IconButton\n              style={{padding: '0 0 0 0'}}\n              onClick={() => {\n                let newPage = Math.max(0, this.state.currentPage - 1);\n                if(newPage !== this.state.currentPage) {\n                  this.setState((state, _) => ({\n                    ...state,\n                    currentPage: newPage,\n                  }), this.fetchData);\n                }\n              }}\n              aria-label=\"previous page\"\n            >\n              <KeyboardArrowLeft />\n          </IconButton>\n  \n          <span style={{color: \"rgba(0,0,0,0.54)\", fontWeight: 400, fontSize: 16}}>\n            {`${this.state.currentPage+1}/${this.state.numPages}`}\n          </span>\n  \n          <IconButton\n            style={{padding: '0 0 0 0'}}\n            onClick={() => {\n              let newPage = Math.min(this.state.currentPage + 1, this.state.numPages - 1);\n              if(newPage !== this.state.currentPage) {\n                this.setState((state, _) => ({\n                  ...state,\n                  currentPage: newPage,\n                }), this.fetchData);\n              }\n            }}\n            aria-label=\"next page\"\n          >\n            <KeyboardArrowRight />\n          </IconButton>\n\n          <IconButton\n            style={{padding: '0 0 0 0'}}\n            onClick={() => {\n              if(this.state.currentPage !== this.state.numPages - 1) {\n                this.setState((state, _) => ({\n                  ...state,\n                  currentPage: state.numPages - 1,\n                }), this.fetchData);\n              }\n            }}\n            aria-label=\"last page\"\n          >\n            <LastPage />\n          </IconButton>\n        </div>\n  \n        <div>\n          {\n            Object.keys(this.state.games).map(gameTs => {\n            return <div style={{width: '95%', margin: 'auto'}} key={gameTs+'div'}>\n                <Game key={gameTs} background={this.state.resultsBackground} \n                gameTs={gameTs} playerEntries={this.state.games[gameTs]}>\n                </Game>\n            </div>\n          })}\n        </div>\n      </Paper>\n    }\n}\n\nexport default Games","import React from 'react';\nimport HelpIcon from '@material-ui/icons/Help';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Dialog from '@material-ui/core/Dialog';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\n\nclass HelpSection extends React.Component {\n    state = {\n        helpModalOpen: false,\n    }\n    \n    dialogContentRef = React.createRef();\n\n    changeModal(openState) {\n        this.setState({\n            helpModalOpen: openState,\n        });\n    }\n\n    typeSetEquations() {\n        window.MathJax.typeset([this.dialogContentRef.current]);\n    }\n\n    render() {\n        return <>\n                <div className=\"help-icon-div\">\n                    <HelpIcon color=\"inherit\" fontSize=\"inherit\" onClick={() => this.changeModal(true)}></HelpIcon>\n                </div>\n\n                <Dialog\n                maxWidth='md'\n                fullWidth={true}\n                open={this.state.helpModalOpen}\n                onClose={() => this.changeModal(false)}\n                onEntered={this.typeSetEquations.bind(this)}>\n                    <DialogTitle><strong>Worms Ranking System</strong></DialogTitle>\n    \n                    <DialogContent ref={this.dialogContentRef}>\n                        <h4>This is a ranking system built for Worms Armageddon v3.7.2.1.</h4>\n                        <p>The data here displayed is collected by a program that reads through the game process' memory and is then sent to the server.</p>\n                        <p>The server, in turn, computes each player score and ranking change and saves everything into a database.</p>\n                        <p className=\"help-section-paragraph\"> <strong> Score measures how well a player did in a given game and is calculated as: </strong> </p>\n                        {\"\\\\[ score = { 3 * \\\\text{ } kills + { damage \\\\over 10 } - { self damage \\\\over 10 } } \\\\]\"}\n                        <p className=\"help-section-paragraph\"> <strong> Δranking is the amount of change in a player's ranking after a given game and is calculated as: </strong> </p>\n                        {\"\\\\[ Δranking = { (score_{player} - score_{game}) * \\\\text{ } rounds_{weight} * \\\\text{ } \\\\Big({Ranking_{player} \\\\over Ranking_{game}}\\\\Big)^2} \\\\]\"}\n                        <div style={{textAlign: 'center', marginTop: 10, marginBottom: 10}}>\n                            <p className=\"help-section-paragraph\">\n                                <strong>where:</strong>\n                            </p>\n                        </div>\n                        {\"\\\\[ score_{game} = \\\\text{average score of all players in a given game} \\\\]\"}\n                        {\"\\\\[ ranking_{game} = \\\\text{average ranking of all players in a given game} \\\\]\"}\n                        {\"\\\\[ rounds_{weight} = { b ^ {(rounds_{player} - rounds_{game})} } \\\\]\"}\n                        <div style={{textAlign: 'center', marginTop: 10, marginBottom: 10}}>\n                            <p className=\"help-section-paragraph\">\n                                <strong>where:</strong>\n                            </p>\n                        </div>\n                        {\"\\\\[ rounds_{player} = \\\\text{rounds played by the player in a given game} \\\\]\"}\n                        {\"\\\\[ rounds_{game} = \\\\text{average rounds played by all player in a given game} \\\\]\"}\n                        {\"\\\\[ b = { \\\\text{0.9 if } rounds_{player} > rounds_{game} \\\\text{ or 0.75 otherwise} } \\\\]\"}\n\n                    </DialogContent>\n    \n                    <Divider />\n                    \n                    <DialogActions>\n                        <Button onClick={() => this.changeModal(false)} color=\"primary\" autoFocus>\n                            Close\n                        </Button>\n                    </DialogActions>\n              </Dialog>\n            </>;\n    }\n}\n\nexport default HelpSection;","import React from 'react';\nimport Container from '@material-ui/core/Container';\n\nimport './App.css';\nimport RankingTable from './components/RankingTable/RankingTable.js';\nimport Games from './components/Games/Games.js';\nimport HelpSection from './components/Help/HelpSection.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container maxWidth={'md'}>\n        <h1 className=\"mainHeader\" style={{display: 'inline-block', marginRight: 5}}>Worms Ranking System</h1>\n        <img className=\"mainWormsImage\" style={{height: 100, position: 'relative'}} src=\"./worms.png\"></img>\n        <RankingTable></RankingTable>\n        <Games></Games>\n        <HelpSection></HelpSection>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}